name: Build and Release

on:
  push:
    tags:
      - 'v*'
      
jobs:
  build-linux:
    name: 构建Linux二进制文件
    runs-on: ubuntu-latest
    container:
      image: clux/muslrust:stable
    steps:
      - uses: actions/checkout@v4
      
      - name: 编译Linux静态二进制文件
        run: |
          cargo build --release
          
      - name: 上传Linux构建产物
        uses: actions/upload-artifact@v4
        with:
          name: lokipool-linux-x86_64
          path: target/x86_64-unknown-linux-musl/release/lokipool

  build-windows:
    name: 构建Windows二进制文件
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 安装Rust工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      
      - name: 安装OpenSSL
        run: |
          choco install openssl
          echo "OPENSSL_DIR=C:/Program Files/OpenSSL-Win64" >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=C:/Program Files/OpenSSL-Win64/lib" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=C:/Program Files/OpenSSL-Win64/include" >> $env:GITHUB_ENV
      
      - name: 编译Windows二进制文件
        run: cargo build --release
        
      - name: 上传Windows构建产物
        uses: actions/upload-artifact@v4
        with:
          name: lokipool-windows-x86_64
          path: target/release/lokipool.exe

  build-macos:
    name: 构建macOS二进制文件
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      
      - name: 安装Rust工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: 安装OpenSSL
        run: brew install openssl@1.1
        
      - name: 设置OpenSSL环境变量
        run: |
          echo "OPENSSL_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV
          
      - name: 编译macOS二进制文件
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: 上传macOS构建产物
        uses: actions/upload-artifact@v4
        with:
          name: lokipool-macos-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/lokipool

  create-release:
    name: 创建GitHub Release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        
      - name: 准备发布文件
        run: |
          mkdir -p release-artifacts
          mv lokipool-linux-x86_64/lokipool release-artifacts/lokipool-linux-x86_64
          mv lokipool-windows-x86_64/lokipool.exe release-artifacts/lokipool-windows-x86_64.exe
          mv lokipool-macos-x86_64-apple-darwin/lokipool release-artifacts/lokipool-macos-x86_64
          mv lokipool-macos-aarch64-apple-darwin/lokipool release-artifacts/lokipool-macos-arm64
          chmod +x release-artifacts/*
          
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-artifacts/lokipool-linux-x86_64
            release-artifacts/lokipool-windows-x86_64.exe
            release-artifacts/lokipool-macos-x86_64
            release-artifacts/lokipool-macos-arm64
